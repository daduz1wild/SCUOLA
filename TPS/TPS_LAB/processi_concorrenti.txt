pid serve per identificare ogni singolo processo presente.
quando uso la funzione fork, ci sono 3 casistiche, <0(oricesso non creato),0(risorsa assegnata al procoesso figlio),>0(processo figlio creato, ma la risorsa è assegnata al padre, il numero intero restituito indica il pid del processo figlio)
<stdlib.h> <stdio.h>
int main(){
	int pid;
	printf("prima della fork: 1 processo MAIN\n");
	pid=fork();
	if(pid<0)
		printf("errore processo figlio noncreato");
	else if(pid ==0)
		printf("ciao sono il processo figlio");
	else
		printf("ciao sono il processo padre");
	retrun 0;
}
nella programmazione concorrente i processi concorrono per avere unja risorsa e facendo in modo che essi vengano eseguiti in contemporanea.
amcchina concorrente(in grado di eseguire più processi sequenziali)